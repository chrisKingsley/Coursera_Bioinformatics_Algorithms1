#!/usr/bin/env python

import math, re, string, sys

COMP_TRANS = string.maketrans("ACGT", "TGCA")

# reverse complements a string
def revComp(seq):
    return seq.translate(COMP_TRANS)[::-1]

# translates DNA sequence to protein
def translate(seq, genCode):
    seq = re.sub('T','U',seq)
    retVal = ''
    
    for pos in range(0, len(seq), 3):
        aa = genCode[ seq[pos:(pos+3)] ]
        if aa is None:
            break
        retVal += genCode[ seq[pos:(pos+3)] ]
        
    return retVal


genCode = dict()
genCodeFile = open('RNA_codon_table_1.txt','r')
for line in genCodeFile:
    codonArray = line.split()
    if len(codonArray)==1:
        genCode[ codonArray[0] ] = None
    else:
        genCode[ codonArray[0] ] = codonArray[1]
genCodeFile.close()


# print translate('AUGGUUACCCCAUACAGAUCCCGA', genCode)
# print translate('CCAAGUACAGAGAUUAAC', genCode)
# print translate('CCCAGUACCGAGAUGAAU', genCode)
# print translate('CCGAGGACCGAAAUCAAC', genCode)
# print translate('CCCAGGACUGAGAUCAAU', genCode)

# finds sequence encoding peptide sequence, if it exists
def findEncodingSeq(seq, pep, genCode):
    codingLength = len(pep)*3
    retVal = []
    
    for pos in range(len(seq)-codingLength+1):
        codingSeq = seq[pos:(pos+codingLength)]
        if translate(codingSeq, genCode)==pep or \
           translate(revComp(codingSeq), genCode)==pep:
            print codingSeq
            
            
# brevisFile = open('B_brevis.txt','r')
# brevisGenome = brevisFile.read()
# brevisGenome = re.sub('\n', '', brevisGenome)
# print brevisGenome
# brevisFile.close()

# findEncodingSeq(brevisGenome,'VKLFPWFNQY',genCode)

pepMassTable = dict()
peptideMassFile = open('integer_mass_table.txt','r')
for line in peptideMassFile:
    aa, mass = line.rstrip().split()
    pepMassTable[ aa ] = int(mass)
peptideMassFile.close()


# returns the mass of the passed peptide
def peptideMass(seq, pepMassTable):
    mass = 0
    for i in range(len(seq)):
        mass += pepMassTable[ seq[i:(i+1)] ]
    return mass
    
# returns a list of amino acid masses in the passed peptide  
def peptideAA_masses(seq, pepMassTable):
    pepMasses = []
    for i in range(len(seq)):
        pepMasses.append( pepMassTable[seq[i:(i+1)]] )
        
    return pepMasses

    
# returns the theoretical cyclic peptide spectrum of the passed peptide
def cycPepSpectrum(seq, pepMassTable):
    masses = [0, peptideMass(seq, pepMassTable) ]
    seqDup = seq + seq
    
    for pepLen in range(1, len(seq)):
        for i in range(len(seq)):
            masses.append(peptideMass(seqDup[i:(i+pepLen)], pepMassTable))
            
    return sorted(masses)
    
# print cycPepSpectrum('TMIA', pepMassTable)
# print cycPepSpectrum('IAMT', pepMassTable)
# print cycPepSpectrum('TLAM', pepMassTable)
# print cycPepSpectrum('MTAL', pepMassTable)
# print cycPepSpectrum('ALTM', pepMassTable)
# print cycPepSpectrum('TAIM', pepMassTable)

    
def cycNumPepSpectrum(peptide):
    masses = [0, sum(peptide)]
    pepDup = peptide + peptide
    
    for pepLen in range(1, len(peptide)):
        for i in range(len(peptide)):
            masses.append( sum(pepDup[i:(i+pepLen)]) )
            
    return sorted(masses)
    
# print ' '.join([ str(x) for x in cycPepSpectrum('LIHYWNCWCIAYT', pepMassTable) ])

def linearNumPepSpectrum(peptide):
    masses = [0, sum(peptide)]
    
    for pepLen in range(1, len(peptide)):
        for i in range(len(peptide)-pepLen+1):
            masses.append( sum(peptide[i:(i+pepLen)]) )
            
    return sorted(masses)
    
#print linearNumPepSpectrum([1,2,3,4])

def linearPepSpectrum(seq, pepMassTable):
    pepMasses = []
    for i in range(len(seq)):
        pepMasses.append( pepMassTable[seq[i:(i+1)]] )
        
    return linearNumPepSpectrum(pepMasses)

def expandPeptides(peptides, aaMasses):
    retVal = []
    
    for i in range(len(peptides)):
        for aaMass in aaMasses:
            temp = list(peptides[i])
            temp.append(aaMass)
            retVal.append( temp )
            
    return retVal
    
def pepSpectraConsistent(peptide, spectrumSet):
    if sum(peptide) > max(spectrumSet):
        return False
    
    for aaMass in peptide:
        if aaMass not in spectrumSet:
            return False
            
    for aaMass in linearNumPepSpectrum(peptide):
        if aaMass not in spectrumSet:
            return False
            
    return True
    
# print pepSpectraConsistent(peptideAA_masses('VAQ', pepMassTable), set([0,71,99,101,103,128,129,199,200,204,227,230,231,298,303,328,330,332,333]))
# print pepSpectraConsistent(peptideAA_masses('TCQ', pepMassTable), set([0,71,99,101,103,128,129,199,200,204,227,230,231,298,303,328,330,332,333]))
# print pepSpectraConsistent(peptideAA_masses('AQV', pepMassTable), set([0,71,99,101,103,128,129,199,200,204,227,230,231,298,303,328,330,332,333]))
# print pepSpectraConsistent(peptideAA_masses('CTQ', pepMassTable), set([0,71,99,101,103,128,129,199,200,204,227,230,231,298,303,328,330,332,333]))
# print pepSpectraConsistent(peptideAA_masses('AVQ', pepMassTable), set([0,71,99,101,103,128,129,199,200,204,227,230,231,298,303,328,330,332,333]))
# print pepSpectraConsistent(peptideAA_masses('CTV', pepMassTable), set([0,71,99,101,103,128,129,199,200,204,227,230,231,298,303,328,330,332,333]))

    
def numAAs(spectrum, pepMassTable):
    numAA = 0
    aaMasses = set(pepMassTable.values())
    
    for aaMass in spectrum:
        if aaMass in aaMasses:
            numAA += 1
            
    return numAA
        
        
def reducedPepMap(spectrum, pepMassTable):
    spectrumSet = set(spectrum)
    newPepMap = dict()
    
    for aa in pepMassTable:
        if pepMassTable[aa] in spectrumSet:
           newPepMap[aa] = pepMassTable[aa]
           
    return newPepMap
    
    
def cyclopeptideSequencing(spectrum, pepMassTable):
    aaMasses = sorted( set(pepMassTable.values()) )
    spectrumSet = set(spectrum)
    peptides = [ [x] for x in aaMasses ]
    
    while len(peptides) > 0:
        peptides = expandPeptides(peptides, aaMasses)
        rm_idx = [True]*len(peptides)
        
        for i in range(len(peptides)):
            peptide = peptides[i]
            cycPepSpectrum = cycNumPepSpectrum(peptide)

            if sum(peptide)==max(spectrum):
                if cycPepSpectrum==spectrum:
                    print '-'.join([ str(x) for x in peptide ])
                rm_idx[i] = False
            elif not pepSpectraConsistent(peptide, spectrumSet):
                rm_idx[i] = False
        
        peptides = [ peptides[x] for x in range(len(peptides)) if rm_idx[x]==True ]


# spectrum = [0,87,113,115,115,128,137,147,156,163,186,200,228,243,252,275,284,291,301,301,315,319,356,399,406,412,414,416,438,438,447,471,501,519,527,529,534,553,575,585,594,616,634,647,657,666,681,690,700,713,731,753,762,772,794,813,818,820,828,846,876,900,909,909,931,933,935,941,948,991,1028,1032,1046,1046,1056,1063,1072,1095,1104,1119,1147,1161,1184,1191,1200,1210,1219,1232,1232,1234,1260,1347]

# pepMassTableReduced = reducedPepMap(spectrum, pepMassTable)
# print pepMassTableReduced
# print 'numAAs %d' % numAAs(spectrum, pepMassTable)

# cyclopeptideSequencing(spectrum, pepMassTableReduced)

def score(seq, spectrum, pepMassTable):
    score = 0
    theoSpectrum = cycPepSpectrum(seq, pepMassTable)
    copySpectrum = list(spectrum)
    
    for aaMass in theoSpectrum:
        if aaMass in copySpectrum:
            score +=1
            copySpectrum.remove(aaMass)
            
    return score
          
# print score('NQEL',[0,99,113,114,129,227,242,257], pepMassTable)
# print score('NQEL',[0,99,113,114,129,227,242,242,257], pepMassTable)
# print score('NQEL',[0,99,113,114,129,227,242,242,242,257], pepMassTable)
# print score('NQEL',[0,99,113,114,128,227,257,299,355,356,370,371,484], pepMassTable)
# print score('MAMA', [0,71,98,99,131,202,202,202,202,202,299,333,333,333,503], pepMassTable)

def linearScore(seq, spectrum, pepMassTable):
    score = 0
    theoSpectrum = linearPepSpectrum(seq, pepMassTable)
    copySpectrum = list(spectrum)
    
    for aaMass in theoSpectrum:
        if aaMass in copySpectrum:
            score +=1
            copySpectrum.remove(aaMass)
            
    return score
    
# print linearScore('PEEP', [0,97,97,129,129,194,203,226,226,258,323,323,323,355,403,452], pepMassTable)


def scoreNumeric(peptideMasses, spectrum):
    score = 0
    theoSpectrum = cycNumPepSpectrum(peptideMasses)
    copySpectrum = list(spectrum)
    
    for aaMass in theoSpectrum:
        if aaMass in copySpectrum:
            score +=1
            copySpectrum.remove(aaMass)
            
    return score

def trim(peptides, spectrum, N):
    scores = []
    for peptide in peptides:
        scores.append(scoreNumeric(peptide, spectrum))

    sortedScores = list(scores)
    sortedScores.sort(reverse=True)
    idx = min(N-1, len(sortedScores)-1)
    if idx < 0:
        return []
    scoreThreshold = sortedScores[idx]
    
    topPeptides = []
    for i in range(len(scores)):
        if scores[i] >= scoreThreshold:
            topPeptides.append(peptides[i])
            
    return topPeptides
    
    
def leaderboardCyclopeptideSequencing(spectrum, N, aaMasses):
    spectrumSet = set(spectrum)
    peptides = [ [x] for x in aaMasses ]
    leaderPeptide = []
    
    while len(peptides) > 0:
        peptides = expandPeptides(peptides, aaMasses)
        rm_idx = [True]*len(peptides)
        
        for i in range(len(peptides)):
            peptide = peptides[i]
            cycPepSpectrum = cycNumPepSpectrum(peptide)

            if sum(peptide)==max(spectrum):
                if scoreNumeric(peptide, spectrum) > scoreNumeric(leaderPeptide, spectrum):
                    leaderPeptide = peptide
                    print 'leader', leaderPeptide, scoreNumeric(leaderPeptide, spectrum)
                
            elif sum(peptide)>max(spectrum):
                rm_idx[i] = False
        
        peptides = [ peptides[x] for x in range(len(peptides)) if rm_idx[x]==True ]
        peptides = trim(peptides, spectrum, N)
        print peptides
        
    print '-'.join([ str(x) for x in leaderPeptide ]), scoreNumeric(leaderPeptide, spectrum)
    
    
# leaderboardCyclopeptideSequencing([0,97,99,113,114,115,128,128,147,147,163,186,227,241,242,244,244,256,260,261,262,283,291,309,330,333,340,347,385,388,389,390,390,405,435,447,485,487,503,504,518,544,552,575,577,584,599,608,631,632,650,651,653,672,690,691,717,738,745,770,779,804,818,819,827,835,837,875,892,892,917,932,932,933,934,965,982,989,1039,1060,1062,1078,1080,1081,1095,1136,1159,1175,1175,1194,1194,1208,1209,1223,1322], 1000, pepMassTable)

def convolution(spectrum):
    spectrum.sort()
    print spectrum
    retVal = []
    
    for i in range(len(spectrum)):
        for j in range(i+1, len(spectrum)):
            if spectrum[i]!=spectrum[j]:
                retVal.append(spectrum[j] - spectrum[i])
            
    retVal.sort()
    return retVal
    
# conv = convolution([1070,682,930,270,388,838,649,114,156,459,850,1086,278,548,960,131,568,184,1120,101,1217,1061,859,611,829,572,156,0,535,1116,822,412,113,1015,746,645,535,902,480,682,682,936,1061,551,719,930,666,131,1104,535,324,211,434,737,147,367,669,257,210,379,395,526,71,1007,248,1033,1146,893,758,1006,498,404,97,969,401,471,606,947,202,1103,816,287,287,939,1086,805,358,813,691,281,315,783])
# print ' '.join([ str(x) for x in conv ])
#print 'convolution', convolution([0,86,160,234,308,320,382])


def topAminoAcidMasses(spectrum, M):
    conv = convolution(spectrum)
    freqs = dict()
    retVal = []
    
    for conVal in conv:
        if conVal>57 and conVal<200:
            freqs[conVal] = freqs.get(conVal, 0) + 1
    
    freqVals = freqs.values()
    freqVals.sort(reverse=True)
    freqThreshold = freqVals[ min(M-1, len(freqVals)-1) ]
    
    for conVal in freqs.keys():
        if freqs[conVal] >= freqThreshold:
            retVal.append(conVal)
    retVal.sort()
    return retVal
        
    
def convolutionCyclopeptideSequencing(spectrum, M, N):
    aaMasses = topAminoAcidMasses(spectrum, M)
    print 'aaMasses', aaMasses
    leaderboardCyclopeptideSequencing(spectrum, N, aaMasses)
    
# print convolutionCyclopeptideSequencing([1459,212,1096,1230,1616,1742,747,357,512,340,1143,1150,211,1386,257,1362,1628,754,414,406,632,1760,980,827,470,228,1247,875,115,245,756,325,616,520,1388,585,535,453,723,535,485,1225,990,1661,1113,626,1630,128,243,893,999,1102,908,643,1744,114,1372,625,740,1361,1002,1466,1416,517,398,1126,128,1241,905,1096,469,1758,1241,186,1574,113,1353,779,1344,163,1475,1533,129,501,1548,965,942,1873,457,1547,827,1467,1745,259,1519,663,1500,699,212,299,1338,1117,968,373,931,354,511,1581,860,1105,1036,131,292,712,883,242,1210,414,1453,1403,745,301,1224,0,1776,373,1356,1631,777,649,871,1459,1759,730,1174,1248,1710,768,1046,1013,1234,1759,885,1404,1572,1648,407,1687,1258,1758,1288,1161,225,626,1516,1338,1500,1595,114,511,370,771,1661,1614,1257,326,342,1631,851,1362,115,777,1119,1745,487,1128,998,760,837,1094,884,278,1503,242,1645,874,1291,128,115,1531,529,582,632,1758,1662,1420,420,1247,1776,615,989,639,97,988,1022,1046,1289,1133,97,1745,584,648], 18, 381)

def extendSolutions(solutions, maxVal):
    retVal = []
    for i in range(len(solutions)):
        for j in range(max(solutions[i]), maxVal+1):
            retVal.append( solutions[i] + [j] )
    return retVal
    
        
def consistentDeltas(solution, deltaCounts):
    solutionCounts = dict()
    
    for i in range(len(solution)):
        for j in range(len(solution)):
            delta = solution[i]-solution[j]
            if delta not in deltaCounts:
                return False
            solutionCounts[ delta ] = solutionCounts.get(delta, 0) + 1
    
    for delta in solutionCounts:
        if solutionCounts[ delta ] > deltaCounts[ delta ]:
            return False
            
    return True
        
        
def turnpike(deltas):
    n = int(math.sqrt(len(deltas)))
    maxVal = max(max(deltas), -min(deltas))
    solutions = [ [x] for x in range(10) ]
    
    deltaCounts = dict()
    for delta in deltas:
        deltaCounts[ delta ] = deltaCounts.get(delta, 0) + 1
    
    for i in range(n-1):
        solutions = extendSolutions(solutions, maxVal)
        good_idx = []
        
        for j in range(len(solutions)):
            if consistentDeltas(solutions[j], deltaCounts):
                good_idx.append(j)
                
        solutions = [ solutions[x] for x in good_idx ]
        #print good_idx, solutions
        print 'iter:%d  numSolutions:%d' % (i, len(solutions))
        
    return solutions
        
    
solutions = turnpike([-779,-777,-775,-769,-763,-761,-759,-759,-755,-753,-750,-748,-746,-743,-742,-740,-739,-736,-735,-734,-733,-732,-731,-730,-726,-726,-726,-725,-725,-722,-721,-719,-717,-716,-716,-715,-713,-712,-711,-711,-711,-709,-709,-707,-706,-701,-701,-701,-700,-699,-698,-697,-696,-693,-693,-692,-691,-690,-688,-688,-687,-687,-686,-686,-685,-684,-684,-684,-682,-682,-682,-681,-680,-680,-679,-679,-678,-678,-677,-677,-675,-674,-674,-674,-673,-673,-672,-672,-672,-670,-670,-669,-668,-668,-667,-664,-664,-664,-664,-664,-662,-661,-660,-660,-659,-658,-658,-658,-658,-657,-657,-657,-657,-657,-656,-655,-655,-654,-654,-654,-652,-652,-652,-651,-651,-651,-650,-650,-649,-649,-648,-648,-647,-647,-647,-646,-645,-645,-645,-644,-643,-643,-643,-642,-642,-642,-642,-641,-641,-641,-639,-638,-638,-638,-637,-637,-637,-636,-636,-635,-635,-635,-634,-633,-633,-632,-632,-632,-631,-631,-631,-630,-630,-630,-629,-629,-629,-628,-628,-628,-628,-627,-627,-627,-627,-626,-625,-625,-625,-625,-625,-625,-623,-623,-622,-622,-622,-621,-621,-619,-619,-618,-618,-617,-617,-616,-616,-615,-615,-615,-615,-614,-614,-614,-613,-612,-612,-612,-612,-610,-610,-609,-609,-608,-608,-608,-606,-606,-606,-606,-605,-605,-605,-604,-604,-604,-603,-602,-602,-602,-602,-601,-601,-599,-599,-599,-599,-599,-599,-598,-598,-598,-597,-597,-596,-596,-595,-595,-595,-595,-595,-594,-594,-593,-593,-593,-593,-593,-592,-591,-591,-590,-590,-589,-589,-589,-589,-589,-589,-588,-588,-588,-588,-588,-587,-586,-586,-585,-585,-585,-584,-584,-584,-584,-583,-583,-583,-582,-582,-582,-581,-581,-580,-580,-579,-579,-579,-579,-579,-579,-578,-578,-578,-577,-576,-576,-576,-575,-575,-575,-575,-575,-574,-574,-574,-574,-573,-573,-573,-572,-572,-571,-571,-571,-570,-570,-570,-570,-570,-570,-569,-569,-569,-568,-568,-568,-567,-566,-566,-566,-566,-565,-565,-565,-565,-564,-563,-563,-563,-562,-562,-562,-562,-561,-561,-561,-561,-561,-561,-560,-560,-560,-559,-559,-558,-558,-557,-557,-557,-557,-557,-556,-556,-556,-555,-554,-554,-554,-554,-554,-553,-553,-553,-552,-552,-552,-551,-551,-551,-551,-550,-550,-550,-548,-548,-547,-547,-547,-547,-547,-546,-546,-546,-546,-546,-546,-545,-545,-545,-545,-545,-545,-544,-544,-544,-544,-544,-543,-543,-543,-542,-542,-542,-542,-542,-541,-541,-541,-541,-541,-540,-540,-540,-540,-540,-540,-539,-538,-538,-538,-538,-538,-538,-538,-537,-537,-536,-536,-536,-534,-534,-534,-534,-534,-533,-533,-533,-533,-533,-532,-532,-531,-530,-530,-530,-530,-530,-530,-530,-529,-529,-529,-529,-528,-528,-528,-528,-527,-527,-527,-527,-526,-525,-525,-525,-525,-525,-524,-524,-523,-522,-522,-521,-521,-521,-521,-521,-521,-521,-520,-520,-520,-519,-519,-518,-518,-518,-517,-517,-517,-517,-517,-517,-516,-516,-516,-515,-515,-515,-515,-514,-513,-513,-513,-513,-513,-512,-512,-512,-512,-511,-511,-511,-510,-510,-509,-509,-509,-509,-508,-508,-508,-508,-507,-507,-507,-506,-506,-506,-505,-505,-505,-505,-505,-504,-504,-504,-504,-503,-503,-503,-503,-502,-502,-502,-502,-502,-501,-501,-501,-500,-500,-500,-500,-500,-500,-500,-499,-499,-499,-499,-498,-498,-498,-498,-498,-498,-497,-497,-497,-497,-497,-497,-496,-496,-496,-495,-495,-495,-495,-494,-494,-493,-493,-493,-493,-493,-493,-492,-492,-491,-491,-491,-490,-490,-490,-489,-489,-489,-489,-488,-488,-488,-488,-488,-488,-487,-487,-487,-486,-486,-486,-485,-485,-485,-485,-485,-485,-485,-485,-484,-484,-484,-484,-483,-483,-483,-482,-482,-481,-481,-481,-481,-480,-480,-480,-480,-479,-479,-479,-479,-478,-477,-477,-477,-477,-477,-476,-476,-476,-476,-476,-476,-475,-475,-475,-474,-474,-474,-473,-473,-473,-472,-472,-472,-472,-472,-472,-472,-472,-472,-472,-472,-471,-471,-471,-470,-470,-469,-469,-468,-468,-468,-468,-467,-467,-467,-466,-466,-466,-466,-465,-465,-465,-465,-464,-464,-464,-463,-463,-463,-463,-463,-463,-462,-462,-462,-462,-461,-461,-461,-461,-460,-460,-460,-460,-460,-460,-460,-459,-459,-459,-459,-458,-458,-457,-457,-457,-456,-456,-456,-456,-456,-456,-455,-455,-455,-455,-455,-455,-454,-454,-454,-454,-454,-453,-452,-451,-451,-451,-450,-450,-450,-450,-449,-449,-449,-449,-449,-449,-449,-448,-448,-448,-447,-447,-447,-447,-446,-446,-446,-445,-445,-445,-445,-444,-444,-443,-443,-443,-443,-443,-443,-443,-442,-442,-441,-441,-441,-441,-441,-441,-441,-440,-440,-440,-440,-440,-439,-439,-438,-438,-437,-437,-437,-437,-437,-437,-436,-436,-436,-436,-436,-435,-435,-435,-434,-434,-434,-434,-433,-433,-433,-433,-432,-432,-432,-432,-432,-432,-431,-431,-431,-431,-431,-431,-430,-430,-430,-430,-430,-429,-429,-428,-428,-428,-428,-428,-427,-427,-427,-427,-427,-427,-426,-425,-424,-424,-424,-424,-424,-424,-424,-424,-424,-424,-423,-423,-423,-423,-422,-422,-422,-422,-421,-421,-420,-420,-420,-420,-420,-419,-419,-418,-418,-418,-418,-418,-418,-418,-418,-417,-416,-416,-416,-415,-414,-414,-414,-414,-414,-414,-413,-413,-413,-413,-412,-412,-411,-411,-411,-411,-411,-411,-411,-411,-410,-410,-410,-410,-409,-409,-409,-408,-408,-408,-408,-408,-408,-408,-407,-407,-407,-407,-407,-406,-406,-406,-405,-405,-404,-404,-404,-404,-404,-403,-403,-403,-403,-403,-402,-401,-401,-401,-401,-401,-401,-401,-400,-400,-400,-400,-400,-400,-399,-399,-399,-399,-399,-398,-398,-397,-397,-397,-397,-396,-396,-396,-395,-395,-395,-395,-394,-394,-394,-394,-394,-393,-393,-393,-393,-392,-392,-392,-391,-391,-391,-391,-391,-391,-391,-391,-390,-390,-390,-390,-390,-389,-389,-389,-388,-388,-388,-388,-388,-388,-388,-388,-387,-387,-387,-387,-387,-386,-386,-386,-386,-386,-385,-385,-385,-384,-383,-383,-383,-383,-383,-382,-382,-382,-382,-382,-381,-381,-381,-381,-380,-380,-380,-379,-379,-379,-378,-378,-378,-378,-378,-377,-377,-377,-376,-376,-376,-376,-376,-375,-375,-375,-375,-375,-374,-374,-374,-374,-374,-374,-373,-373,-373,-373,-372,-371,-371,-371,-371,-371,-371,-371,-370,-370,-370,-370,-370,-370,-369,-369,-369,-368,-368,-368,-368,-368,-367,-367,-367,-367,-366,-366,-366,-365,-365,-365,-365,-365,-364,-364,-364,-364,-364,-363,-363,-363,-363,-362,-362,-362,-361,-361,-361,-360,-360,-359,-359,-359,-358,-358,-358,-358,-358,-358,-358,-358,-357,-357,-357,-356,-356,-356,-356,-356,-356,-356,-356,-356,-355,-355,-355,-355,-354,-354,-354,-354,-354,-354,-353,-353,-353,-352,-352,-352,-352,-352,-351,-351,-351,-350,-350,-350,-350,-350,-349,-349,-349,-349,-348,-348,-348,-348,-348,-348,-347,-347,-347,-347,-346,-346,-346,-346,-345,-345,-345,-345,-345,-344,-344,-344,-343,-343,-343,-343,-343,-343,-343,-343,-342,-342,-342,-342,-342,-342,-342,-341,-341,-341,-340,-340,-340,-339,-339,-339,-339,-338,-338,-338,-338,-338,-337,-337,-337,-336,-336,-336,-335,-335,-335,-335,-335,-334,-334,-334,-334,-334,-334,-333,-333,-333,-333,-333,-333,-333,-332,-332,-332,-331,-331,-331,-331,-331,-330,-330,-330,-330,-330,-329,-329,-329,-329,-329,-328,-328,-328,-327,-327,-327,-327,-327,-326,-326,-326,-326,-326,-326,-326,-325,-325,-325,-325,-325,-325,-324,-324,-324,-323,-323,-323,-323,-322,-322,-322,-322,-322,-322,-321,-321,-321,-320,-320,-320,-320,-319,-319,-319,-319,-319,-319,-318,-318,-318,-318,-317,-317,-317,-317,-317,-317,-317,-316,-316,-316,-316,-316,-316,-315,-315,-315,-314,-314,-314,-313,-313,-312,-312,-312,-312,-312,-312,-311,-311,-311,-311,-311,-311,-311,-310,-310,-310,-310,-310,-310,-310,-309,-309,-309,-308,-308,-308,-308,-308,-308,-307,-307,-307,-306,-306,-306,-306,-305,-305,-305,-305,-304,-304,-304,-304,-304,-304,-303,-303,-302,-302,-302,-302,-302,-301,-301,-301,-301,-300,-300,-300,-300,-300,-299,-299,-299,-299,-299,-298,-298,-298,-298,-297,-297,-297,-296,-296,-296,-296,-296,-296,-295,-295,-295,-294,-294,-294,-294,-294,-294,-294,-294,-293,-293,-293,-293,-293,-293,-292,-292,-292,-291,-291,-291,-291,-291,-291,-291,-290,-290,-290,-290,-289,-289,-289,-289,-288,-288,-288,-288,-288,-287,-287,-287,-287,-287,-286,-286,-286,-285,-285,-285,-285,-284,-284,-284,-284,-284,-283,-283,-283,-283,-282,-282,-282,-282,-282,-282,-281,-281,-281,-281,-280,-280,-279,-279,-279,-279,-279,-279,-279,-279,-279,-278,-278,-278,-277,-277,-277,-277,-277,-276,-276,-276,-276,-276,-275,-275,-275,-275,-275,-274,-274,-274,-274,-274,-274,-273,-273,-273,-272,-272,-272,-271,-271,-271,-271,-271,-271,-271,-271,-271,-271,-270,-270,-270,-270,-270,-269,-269,-269,-269,-269,-269,-269,-268,-268,-268,-267,-267,-267,-267,-267,-266,-266,-266,-265,-264,-264,-264,-264,-263,-263,-263,-263,-263,-263,-263,-262,-262,-262,-262,-262,-261,-261,-261,-261,-260,-260,-260,-260,-260,-260,-260,-259,-259,-259,-259,-259,-259,-258,-258,-258,-258,-258,-257,-257,-257,-257,-257,-256,-256,-256,-256,-256,-255,-254,-254,-254,-254,-254,-254,-254,-253,-253,-252,-252,-252,-252,-252,-252,-251,-251,-251,-251,-251,-251,-251,-251,-251,-250,-250,-250,-250,-250,-250,-250,-249,-249,-249,-249,-249,-249,-249,-249,-248,-248,-248,-248,-247,-247,-246,-246,-246,-246,-246,-246,-246,-245,-245,-245,-245,-245,-244,-244,-244,-244,-244,-243,-243,-243,-243,-242,-242,-242,-242,-241,-241,-241,-241,-241,-240,-240,-240,-239,-239,-239,-239,-239,-239,-239,-238,-238,-238,-238,-237,-237,-237,-237,-237,-237,-237,-237,-237,-236,-236,-236,-236,-236,-236,-236,-235,-235,-235,-235,-235,-234,-234,-234,-234,-234,-234,-233,-233,-233,-232,-232,-232,-231,-231,-231,-230,-230,-230,-229,-229,-229,-229,-229,-228,-228,-228,-228,-228,-228,-228,-228,-227,-227,-227,-227,-227,-226,-226,-226,-226,-226,-226,-226,-225,-225,-225,-225,-225,-224,-224,-224,-224,-224,-223,-223,-223,-223,-223,-222,-222,-222,-222,-222,-221,-221,-221,-221,-221,-221,-221,-221,-220,-220,-220,-220,-219,-219,-219,-219,-219,-219,-218,-218,-218,-218,-218,-218,-217,-217,-217,-217,-217,-216,-216,-215,-215,-215,-215,-215,-214,-214,-214,-214,-214,-214,-214,-213,-213,-213,-213,-213,-213,-213,-212,-212,-212,-211,-211,-211,-211,-211,-211,-211,-210,-210,-210,-209,-209,-209,-209,-209,-209,-209,-209,-208,-208,-208,-207,-207,-207,-207,-207,-206,-206,-206,-206,-206,-206,-206,-205,-205,-205,-205,-205,-205,-205,-205,-204,-204,-204,-204,-203,-203,-203,-203,-203,-203,-203,-202,-202,-202,-202,-202,-202,-201,-201,-201,-201,-201,-201,-200,-200,-200,-200,-200,-199,-199,-199,-198,-198,-198,-198,-198,-198,-198,-197,-197,-197,-197,-197,-197,-196,-196,-196,-196,-196,-195,-195,-195,-195,-195,-195,-194,-194,-194,-194,-193,-193,-193,-193,-192,-192,-192,-192,-192,-192,-191,-191,-191,-190,-190,-190,-190,-190,-190,-189,-189,-189,-189,-189,-189,-188,-188,-188,-188,-188,-188,-188,-188,-188,-187,-187,-187,-187,-187,-187,-187,-186,-186,-186,-186,-186,-186,-186,-186,-186,-185,-185,-185,-185,-185,-185,-185,-185,-184,-184,-184,-184,-184,-184,-183,-183,-183,-183,-183,-183,-183,-182,-182,-182,-182,-182,-182,-182,-181,-181,-181,-181,-181,-181,-181,-180,-180,-180,-180,-180,-180,-180,-179,-179,-179,-179,-179,-178,-178,-178,-178,-177,-177,-176,-176,-175,-175,-175,-175,-175,-175,-175,-175,-174,-174,-174,-174,-174,-173,-173,-173,-173,-173,-173,-172,-172,-172,-172,-172,-172,-171,-171,-171,-171,-171,-171,-171,-171,-171,-171,-171,-171,-170,-170,-170,-170,-170,-170,-170,-169,-169,-169,-169,-169,-169,-168,-168,-168,-168,-168,-168,-167,-167,-167,-167,-167,-167,-167,-166,-166,-166,-166,-166,-165,-165,-165,-165,-165,-165,-164,-164,-164,-164,-164,-163,-163,-163,-163,-163,-162,-162,-162,-162,-162,-162,-162,-162,-161,-161,-161,-161,-161,-161,-161,-160,-160,-160,-160,-160,-160,-160,-159,-159,-159,-159,-159,-158,-158,-158,-158,-158,-157,-157,-157,-157,-157,-157,-157,-157,-156,-156,-156,-155,-155,-155,-155,-155,-155,-155,-155,-155,-154,-154,-154,-154,-154,-154,-154,-153,-153,-153,-153,-153,-153,-152,-152,-152,-152,-152,-152,-152,-151,-151,-151,-151,-151,-151,-151,-150,-150,-150,-150,-150,-150,-150,-150,-149,-149,-149,-149,-149,-149,-148,-148,-148,-148,-147,-147,-147,-147,-147,-147,-147,-147,-147,-146,-146,-146,-146,-146,-146,-145,-145,-145,-145,-145,-145,-145,-145,-144,-144,-144,-144,-144,-143,-143,-143,-143,-143,-143,-143,-142,-142,-142,-142,-142,-142,-142,-142,-141,-141,-141,-141,-141,-141,-141,-140,-140,-140,-139,-139,-139,-139,-139,-139,-139,-139,-139,-139,-139,-138,-138,-138,-138,-138,-138,-138,-137,-137,-137,-137,-137,-137,-137,-137,-137,-137,-137,-136,-136,-136,-136,-136,-135,-134,-134,-134,-134,-134,-134,-134,-134,-133,-133,-133,-133,-133,-133,-132,-132,-132,-132,-132,-132,-132,-132,-131,-131,-131,-131,-131,-130,-130,-130,-130,-130,-130,-130,-130,-130,-130,-130,-130,-130,-129,-129,-129,-129,-129,-129,-129,-129,-128,-128,-128,-128,-128,-127,-127,-127,-127,-127,-127,-127,-127,-126,-126,-126,-126,-126,-125,-125,-125,-125,-125,-124,-124,-124,-124,-124,-124,-123,-123,-123,-123,-123,-122,-122,-122,-122,-122,-122,-122,-122,-122,-121,-121,-121,-121,-120,-120,-120,-120,-120,-120,-120,-120,-119,-119,-119,-119,-118,-118,-118,-118,-118,-118,-118,-117,-117,-117,-117,-117,-117,-117,-117,-116,-116,-116,-116,-116,-116,-116,-116,-115,-115,-114,-114,-114,-114,-114,-114,-114,-114,-114,-114,-114,-114,-114,-113,-113,-113,-113,-113,-113,-113,-113,-113,-112,-112,-112,-112,-112,-112,-112,-112,-111,-111,-111,-111,-111,-111,-111,-111,-110,-110,-110,-110,-110,-110,-110,-110,-109,-109,-109,-109,-108,-108,-108,-108,-108,-108,-107,-107,-107,-107,-107,-107,-107,-107,-107,-107,-106,-106,-106,-106,-106,-106,-105,-105,-105,-105,-105,-105,-105,-104,-104,-104,-104,-104,-104,-103,-103,-103,-103,-103,-103,-103,-102,-102,-102,-102,-102,-102,-102,-102,-102,-101,-101,-101,-101,-101,-101,-101,-101,-100,-100,-100,-100,-100,-100,-100,-99,-99,-99,-99,-99,-99,-99,-99,-99,-98,-98,-98,-98,-98,-98,-98,-98,-98,-98,-98,-97,-97,-97,-97,-97,-97,-97,-97,-97,-97,-97,-97,-96,-96,-96,-96,-96,-96,-95,-95,-95,-95,-95,-94,-94,-94,-94,-93,-93,-93,-93,-93,-93,-92,-92,-92,-92,-92,-92,-91,-91,-91,-91,-91,-91,-91,-91,-91,-91,-90,-90,-90,-90,-89,-89,-89,-89,-89,-89,-89,-89,-89,-89,-89,-89,-89,-89,-89,-88,-88,-88,-88,-88,-87,-87,-87,-87,-87,-87,-87,-87,-86,-86,-86,-86,-86,-86,-86,-85,-85,-85,-85,-85,-85,-85,-85,-85,-85,-85,-85,-85,-85,-85,-84,-84,-84,-84,-84,-84,-84,-84,-84,-84,-84,-84,-83,-83,-83,-83,-83,-83,-82,-82,-82,-82,-82,-82,-82,-82,-82,-81,-81,-81,-81,-81,-81,-81,-81,-81,-80,-80,-80,-80,-79,-79,-79,-79,-79,-79,-79,-79,-78,-78,-78,-78,-78,-78,-78,-78,-77,-77,-77,-77,-76,-76,-76,-76,-76,-76,-76,-76,-75,-75,-75,-75,-75,-75,-75,-74,-74,-74,-74,-74,-74,-74,-74,-74,-74,-74,-73,-73,-73,-73,-73,-73,-73,-73,-72,-72,-72,-72,-72,-72,-72,-72,-72,-71,-71,-71,-71,-71,-71,-71,-71,-70,-70,-70,-70,-70,-70,-70,-69,-69,-69,-69,-69,-69,-69,-69,-69,-69,-68,-68,-68,-68,-68,-68,-68,-68,-68,-68,-68,-68,-68,-67,-67,-67,-67,-66,-66,-66,-66,-66,-66,-66,-66,-66,-66,-66,-65,-65,-65,-65,-65,-64,-64,-64,-64,-63,-63,-63,-63,-63,-63,-63,-63,-62,-62,-62,-62,-62,-62,-62,-62,-61,-61,-61,-61,-61,-61,-61,-61,-60,-60,-60,-60,-60,-60,-60,-60,-59,-59,-59,-59,-59,-59,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-57,-57,-57,-57,-57,-57,-57,-57,-57,-57,-57,-56,-56,-56,-56,-56,-56,-56,-56,-55,-55,-55,-55,-55,-55,-55,-54,-54,-54,-54,-54,-54,-54,-54,-54,-54,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-52,-52,-52,-52,-52,-52,-52,-52,-52,-51,-51,-51,-50,-50,-50,-50,-49,-49,-49,-49,-49,-49,-49,-49,-49,-49,-49,-49,-48,-48,-48,-48,-48,-48,-48,-48,-48,-48,-47,-47,-47,-47,-47,-47,-47,-47,-46,-46,-46,-46,-46,-45,-45,-45,-45,-45,-45,-45,-45,-45,-45,-45,-44,-44,-44,-44,-44,-44,-44,-44,-44,-44,-43,-43,-43,-43,-43,-43,-43,-43,-43,-42,-42,-42,-42,-42,-42,-42,-42,-42,-42,-42,-41,-41,-41,-41,-41,-41,-40,-40,-40,-40,-40,-40,-40,-40,-40,-40,-39,-39,-39,-39,-39,-39,-39,-39,-39,-39,-38,-38,-38,-38,-37,-37,-37,-37,-37,-37,-37,-37,-37,-37,-36,-36,-36,-36,-36,-36,-36,-36,-36,-36,-36,-35,-35,-35,-35,-35,-34,-34,-34,-34,-34,-33,-33,-33,-33,-33,-33,-33,-33,-33,-32,-32,-32,-32,-32,-32,-32,-32,-32,-32,-32,-32,-32,-31,-31,-31,-31,-31,-31,-30,-30,-30,-30,-30,-30,-30,-30,-30,-30,-29,-29,-29,-29,-29,-29,-29,-29,-29,-28,-28,-28,-28,-28,-28,-28,-28,-27,-27,-27,-27,-27,-27,-27,-27,-27,-26,-26,-26,-26,-26,-26,-25,-25,-25,-25,-25,-25,-25,-25,-25,-24,-24,-24,-24,-24,-24,-24,-23,-23,-23,-23,-23,-23,-23,-23,-23,-23,-23,-23,-23,-23,-23,-22,-22,-22,-22,-21,-21,-21,-21,-21,-21,-21,-20,-20,-20,-20,-20,-20,-20,-20,-19,-19,-19,-19,-19,-19,-19,-19,-18,-18,-18,-18,-17,-17,-17,-17,-17,-17,-17,-17,-17,-17,-17,-17,-17,-16,-16,-16,-16,-16,-16,-16,-16,-16,-16,-15,-15,-15,-15,-15,-15,-15,-15,-14,-14,-14,-14,-14,-14,-14,-14,-13,-13,-13,-13,-13,-13,-13,-13,-13,-13,-13,-13,-13,-13,-13,-13,-12,-12,-12,-12,-12,-12,-12,-12,-11,-11,-11,-11,-11,-11,-10,-10,-10,-10,-10,-10,-10,-9,-9,-9,-9,-9,-9,-9,-9,-8,-8,-8,-8,-8,-8,-8,-7,-7,-7,-7,-6,-6,-6,-6,-6,-6,-6,-5,-5,-5,-5,-5,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-3,-3,-3,-3,-3,-3,-2,-2,-2,-2,-2,-1,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,2,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,6,6,6,6,6,6,6,7,7,7,7,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,11,11,11,11,11,11,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,16,16,16,16,16,16,16,16,16,16,17,17,17,17,17,17,17,17,17,17,17,17,17,18,18,18,18,19,19,19,19,19,19,19,19,20,20,20,20,20,20,20,20,21,21,21,21,21,21,21,22,22,22,22,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,24,24,24,24,24,24,24,25,25,25,25,25,25,25,25,25,26,26,26,26,26,26,27,27,27,27,27,27,27,27,27,28,28,28,28,28,28,28,28,29,29,29,29,29,29,29,29,29,30,30,30,30,30,30,30,30,30,30,31,31,31,31,31,31,32,32,32,32,32,32,32,32,32,32,32,32,32,33,33,33,33,33,33,33,33,33,34,34,34,34,34,35,35,35,35,35,36,36,36,36,36,36,36,36,36,36,36,37,37,37,37,37,37,37,37,37,37,38,38,38,38,39,39,39,39,39,39,39,39,39,39,40,40,40,40,40,40,40,40,40,40,41,41,41,41,41,41,42,42,42,42,42,42,42,42,42,42,42,43,43,43,43,43,43,43,43,43,44,44,44,44,44,44,44,44,44,44,45,45,45,45,45,45,45,45,45,45,45,46,46,46,46,46,47,47,47,47,47,47,47,47,48,48,48,48,48,48,48,48,48,48,49,49,49,49,49,49,49,49,49,49,49,49,50,50,50,50,51,51,51,52,52,52,52,52,52,52,52,52,53,53,53,53,53,53,53,53,53,53,54,54,54,54,54,54,54,54,54,54,55,55,55,55,55,55,55,56,56,56,56,56,56,56,56,57,57,57,57,57,57,57,57,57,57,57,58,58,58,58,58,58,58,58,58,58,59,59,59,59,59,59,60,60,60,60,60,60,60,60,61,61,61,61,61,61,61,61,62,62,62,62,62,62,62,62,63,63,63,63,63,63,63,63,64,64,64,64,65,65,65,65,65,66,66,66,66,66,66,66,66,66,66,66,67,67,67,67,68,68,68,68,68,68,68,68,68,68,68,68,68,69,69,69,69,69,69,69,69,69,69,70,70,70,70,70,70,70,71,71,71,71,71,71,71,71,72,72,72,72,72,72,72,72,72,73,73,73,73,73,73,73,73,74,74,74,74,74,74,74,74,74,74,74,75,75,75,75,75,75,75,76,76,76,76,76,76,76,76,77,77,77,77,78,78,78,78,78,78,78,78,79,79,79,79,79,79,79,79,80,80,80,80,81,81,81,81,81,81,81,81,81,82,82,82,82,82,82,82,82,82,83,83,83,83,83,83,84,84,84,84,84,84,84,84,84,84,84,84,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,86,86,86,86,86,86,86,87,87,87,87,87,87,87,87,88,88,88,88,88,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,90,90,90,90,91,91,91,91,91,91,91,91,91,91,92,92,92,92,92,92,93,93,93,93,93,93,94,94,94,94,95,95,95,95,95,96,96,96,96,96,96,97,97,97,97,97,97,97,97,97,97,97,97,98,98,98,98,98,98,98,98,98,98,98,99,99,99,99,99,99,99,99,99,100,100,100,100,100,100,100,101,101,101,101,101,101,101,101,102,102,102,102,102,102,102,102,102,103,103,103,103,103,103,103,104,104,104,104,104,104,105,105,105,105,105,105,105,106,106,106,106,106,106,107,107,107,107,107,107,107,107,107,107,108,108,108,108,108,108,109,109,109,109,110,110,110,110,110,110,110,110,111,111,111,111,111,111,111,111,112,112,112,112,112,112,112,112,113,113,113,113,113,113,113,113,113,114,114,114,114,114,114,114,114,114,114,114,114,114,115,115,116,116,116,116,116,116,116,116,117,117,117,117,117,117,117,117,118,118,118,118,118,118,118,119,119,119,119,120,120,120,120,120,120,120,120,121,121,121,121,122,122,122,122,122,122,122,122,122,123,123,123,123,123,124,124,124,124,124,124,125,125,125,125,125,126,126,126,126,126,127,127,127,127,127,127,127,127,128,128,128,128,128,129,129,129,129,129,129,129,129,130,130,130,130,130,130,130,130,130,130,130,130,130,131,131,131,131,131,132,132,132,132,132,132,132,132,133,133,133,133,133,133,134,134,134,134,134,134,134,134,135,136,136,136,136,136,137,137,137,137,137,137,137,137,137,137,137,138,138,138,138,138,138,138,139,139,139,139,139,139,139,139,139,139,139,140,140,140,141,141,141,141,141,141,141,142,142,142,142,142,142,142,142,143,143,143,143,143,143,143,144,144,144,144,144,145,145,145,145,145,145,145,145,146,146,146,146,146,146,147,147,147,147,147,147,147,147,147,148,148,148,148,149,149,149,149,149,149,150,150,150,150,150,150,150,150,151,151,151,151,151,151,151,152,152,152,152,152,152,152,153,153,153,153,153,153,154,154,154,154,154,154,154,155,155,155,155,155,155,155,155,155,156,156,156,157,157,157,157,157,157,157,157,158,158,158,158,158,159,159,159,159,159,160,160,160,160,160,160,160,161,161,161,161,161,161,161,162,162,162,162,162,162,162,162,163,163,163,163,163,164,164,164,164,164,165,165,165,165,165,165,166,166,166,166,166,167,167,167,167,167,167,167,168,168,168,168,168,168,169,169,169,169,169,169,170,170,170,170,170,170,170,171,171,171,171,171,171,171,171,171,171,171,171,172,172,172,172,172,172,173,173,173,173,173,173,174,174,174,174,174,175,175,175,175,175,175,175,175,176,176,177,177,178,178,178,178,179,179,179,179,179,180,180,180,180,180,180,180,181,181,181,181,181,181,181,182,182,182,182,182,182,182,183,183,183,183,183,183,183,184,184,184,184,184,184,185,185,185,185,185,185,185,185,186,186,186,186,186,186,186,186,186,187,187,187,187,187,187,187,188,188,188,188,188,188,188,188,188,189,189,189,189,189,189,190,190,190,190,190,190,191,191,191,192,192,192,192,192,192,193,193,193,193,194,194,194,194,195,195,195,195,195,195,196,196,196,196,196,197,197,197,197,197,197,198,198,198,198,198,198,198,199,199,199,200,200,200,200,200,201,201,201,201,201,201,202,202,202,202,202,202,203,203,203,203,203,203,203,204,204,204,204,205,205,205,205,205,205,205,205,206,206,206,206,206,206,206,207,207,207,207,207,208,208,208,209,209,209,209,209,209,209,209,210,210,210,211,211,211,211,211,211,211,212,212,212,213,213,213,213,213,213,213,214,214,214,214,214,214,214,215,215,215,215,215,216,216,217,217,217,217,217,218,218,218,218,218,218,219,219,219,219,219,219,220,220,220,220,221,221,221,221,221,221,221,221,222,222,222,222,222,223,223,223,223,223,224,224,224,224,224,225,225,225,225,225,226,226,226,226,226,226,226,227,227,227,227,227,228,228,228,228,228,228,228,228,229,229,229,229,229,230,230,230,231,231,231,232,232,232,233,233,233,234,234,234,234,234,234,235,235,235,235,235,236,236,236,236,236,236,236,237,237,237,237,237,237,237,237,237,238,238,238,238,239,239,239,239,239,239,239,240,240,240,241,241,241,241,241,242,242,242,242,243,243,243,243,244,244,244,244,244,245,245,245,245,245,246,246,246,246,246,246,246,247,247,248,248,248,248,249,249,249,249,249,249,249,249,250,250,250,250,250,250,250,251,251,251,251,251,251,251,251,251,252,252,252,252,252,252,253,253,254,254,254,254,254,254,254,255,256,256,256,256,256,257,257,257,257,257,258,258,258,258,258,259,259,259,259,259,259,260,260,260,260,260,260,260,261,261,261,261,262,262,262,262,262,263,263,263,263,263,263,263,264,264,264,264,265,266,266,266,267,267,267,267,267,268,268,268,269,269,269,269,269,269,269,270,270,270,270,270,271,271,271,271,271,271,271,271,271,271,272,272,272,273,273,273,274,274,274,274,274,274,275,275,275,275,275,276,276,276,276,276,277,277,277,277,277,278,278,278,279,279,279,279,279,279,279,279,279,280,280,281,281,281,281,282,282,282,282,282,282,283,283,283,283,284,284,284,284,284,285,285,285,285,286,286,286,287,287,287,287,287,288,288,288,288,288,289,289,289,289,290,290,290,290,291,291,291,291,291,291,291,292,292,292,293,293,293,293,293,293,294,294,294,294,294,294,294,294,295,295,295,296,296,296,296,296,296,297,297,297,298,298,298,298,299,299,299,299,299,300,300,300,300,300,301,301,301,301,302,302,302,302,302,303,303,304,304,304,304,304,304,305,305,305,305,306,306,306,306,307,307,307,308,308,308,308,308,308,309,309,309,310,310,310,310,310,310,310,311,311,311,311,311,311,311,312,312,312,312,312,312,313,313,314,314,314,315,315,315,316,316,316,316,316,316,317,317,317,317,317,317,317,318,318,318,318,319,319,319,319,319,319,320,320,320,320,321,321,321,322,322,322,322,322,322,323,323,323,323,324,324,324,325,325,325,325,325,325,326,326,326,326,326,326,326,327,327,327,327,327,328,328,328,329,329,329,329,329,330,330,330,330,330,331,331,331,331,331,332,332,332,333,333,333,333,333,333,333,334,334,334,334,334,334,335,335,335,335,335,336,336,336,337,337,337,338,338,338,338,338,339,339,339,339,340,340,340,341,341,341,342,342,342,342,342,342,342,343,343,343,343,343,343,343,343,344,344,344,345,345,345,345,345,346,346,346,346,347,347,347,347,348,348,348,348,348,348,349,349,349,349,350,350,350,350,350,351,351,351,352,352,352,352,352,353,353,353,354,354,354,354,354,354,355,355,355,355,356,356,356,356,356,356,356,356,356,357,357,357,358,358,358,358,358,358,358,358,359,359,359,360,360,361,361,361,362,362,362,363,363,363,363,364,364,364,364,364,365,365,365,365,365,366,366,366,367,367,367,367,368,368,368,368,368,369,369,369,370,370,370,370,370,370,371,371,371,371,371,371,371,372,373,373,373,373,374,374,374,374,374,374,375,375,375,375,375,376,376,376,376,376,377,377,377,378,378,378,378,378,379,379,379,380,380,380,381,381,381,381,382,382,382,382,382,383,383,383,383,383,384,385,385,385,386,386,386,386,386,387,387,387,387,387,388,388,388,388,388,388,388,388,389,389,389,390,390,390,390,390,391,391,391,391,391,391,391,391,392,392,392,393,393,393,393,394,394,394,394,394,395,395,395,395,396,396,396,397,397,397,397,398,398,399,399,399,399,399,400,400,400,400,400,400,401,401,401,401,401,401,401,402,403,403,403,403,403,404,404,404,404,404,405,405,406,406,406,407,407,407,407,407,408,408,408,408,408,408,408,409,409,409,410,410,410,410,411,411,411,411,411,411,411,411,412,412,413,413,413,413,414,414,414,414,414,414,415,416,416,416,417,418,418,418,418,418,418,418,418,419,419,420,420,420,420,420,421,421,422,422,422,422,423,423,423,423,424,424,424,424,424,424,424,424,424,424,425,426,427,427,427,427,427,427,428,428,428,428,428,429,429,430,430,430,430,430,431,431,431,431,431,431,432,432,432,432,432,432,433,433,433,433,434,434,434,434,435,435,435,436,436,436,436,436,437,437,437,437,437,437,438,438,439,439,440,440,440,440,440,441,441,441,441,441,441,441,442,442,443,443,443,443,443,443,443,444,444,445,445,445,445,446,446,446,447,447,447,447,448,448,448,449,449,449,449,449,449,449,450,450,450,450,451,451,451,452,453,454,454,454,454,454,455,455,455,455,455,455,456,456,456,456,456,456,457,457,457,458,458,459,459,459,459,460,460,460,460,460,460,460,461,461,461,461,462,462,462,462,463,463,463,463,463,463,464,464,464,465,465,465,465,466,466,466,466,467,467,467,468,468,468,468,469,469,470,470,471,471,471,472,472,472,472,472,472,472,472,472,472,472,473,473,473,474,474,474,475,475,475,476,476,476,476,476,476,477,477,477,477,477,478,479,479,479,479,480,480,480,480,481,481,481,481,482,482,483,483,483,484,484,484,484,485,485,485,485,485,485,485,485,486,486,486,487,487,487,488,488,488,488,488,488,489,489,489,489,490,490,490,491,491,491,492,492,493,493,493,493,493,493,494,494,495,495,495,495,496,496,496,497,497,497,497,497,497,498,498,498,498,498,498,499,499,499,499,500,500,500,500,500,500,500,501,501,501,502,502,502,502,502,503,503,503,503,504,504,504,504,505,505,505,505,505,506,506,506,507,507,507,508,508,508,508,509,509,509,509,510,510,511,511,511,512,512,512,512,513,513,513,513,513,514,515,515,515,515,516,516,516,517,517,517,517,517,517,518,518,518,519,519,520,520,520,521,521,521,521,521,521,521,522,522,523,524,524,525,525,525,525,525,526,527,527,527,527,528,528,528,528,529,529,529,529,530,530,530,530,530,530,530,531,532,532,533,533,533,533,533,534,534,534,534,534,536,536,536,537,537,538,538,538,538,538,538,538,539,540,540,540,540,540,540,541,541,541,541,541,542,542,542,542,542,543,543,543,544,544,544,544,544,545,545,545,545,545,545,546,546,546,546,546,546,547,547,547,547,547,548,548,550,550,550,551,551,551,551,552,552,552,553,553,553,554,554,554,554,554,555,556,556,556,557,557,557,557,557,558,558,559,559,560,560,560,561,561,561,561,561,561,562,562,562,562,563,563,563,564,565,565,565,565,566,566,566,566,567,568,568,568,569,569,569,570,570,570,570,570,570,571,571,571,572,572,573,573,573,574,574,574,574,575,575,575,575,575,576,576,576,577,578,578,578,579,579,579,579,579,579,580,580,581,581,582,582,582,583,583,583,584,584,584,584,585,585,585,586,586,587,588,588,588,588,588,589,589,589,589,589,589,590,590,591,591,592,593,593,593,593,593,594,594,595,595,595,595,595,596,596,597,597,598,598,598,599,599,599,599,599,599,601,601,602,602,602,602,603,604,604,604,605,605,605,606,606,606,606,608,608,608,609,609,610,610,612,612,612,612,613,614,614,614,615,615,615,615,616,616,617,617,618,618,619,619,621,621,622,622,622,623,623,625,625,625,625,625,625,626,627,627,627,627,628,628,628,628,629,629,629,630,630,630,631,631,631,632,632,632,633,633,634,635,635,635,636,636,637,637,637,638,638,638,639,641,641,641,642,642,642,642,643,643,643,644,645,645,645,646,647,647,647,648,648,649,649,650,650,651,651,651,652,652,652,654,654,654,655,655,656,657,657,657,657,657,658,658,658,658,659,660,660,661,662,664,664,664,664,664,667,668,668,669,670,670,672,672,672,673,673,674,674,674,675,677,677,678,678,679,679,680,680,681,682,682,682,684,684,684,685,686,686,687,687,688,688,690,691,692,693,693,696,697,698,699,700,701,701,701,706,707,709,709,711,711,711,712,713,715,716,716,717,719,721,722,725,725,726,726,726,730,731,732,733,734,735,736,739,740,742,743,746,748,750,753,755,759,759,761,763,769,775,777,779])
for solution in solutions:
    print ' '.join([ str(x) for x in solution])